model SistemaAviacion
-------------- Enumerations ------------
enum EstadoAvion {Volando, Hangar, Desguace}
-------------- Classes ------------------
class Aerolinea
    attributes
        nombre : String
end

class Avion
    attributes
        estado : EstadoAvion
        viajesCompletados : Integer
        kmRecorridos : Real derive : -- Falta hacer esto
end

associationclass Contrato between 
        Avion [1..*] role Pertenece
        Aerolinea [1] role Tiene
    attributes
        numMesesContrato : Integer
        precioMes : Real
        precioTotal : Real derive : self.precioMes * self.numMesesContrato --ESTO NO SE SI ESTÁ BIEN  
end

class Aeropuerto
    attributes
        nombre : String 
        ciudad : String
end

class Hangar
    attributes
        capacidad : Integer
end 

composition hangarAeropuerto between
    Aeropuerto [1]
    Hangar [0..1]
end

class Desguace
    attributes
        capacidad : Integer
end 

composition desguaceAeropuerto between
    Aeropuerto [1]
    Desguace [0..1]
end

class Piloto
    attributes
        nombre : String
        edad : Integer
        viajesComoPrincipal : Integer
        viajesComoSecundario : Integer
        kmRecorridosTotales : Integer
        esPro : Boolean
end

association Trabajan between 
    Piloto [1] role Trabaja
    Aerolinea [1..*] role Pertenece
end

class Vuelo 
    attributes
        identificador : String
        distancia : Integer
end

association PilotoPrimario between 
    Piloto [1] role Pilota
    Vuelo [1] role Es_Pilotado
end

association PilotoSecundario between 
    Piloto [1] role Pilota
    Vuelo [0..1] role Es_Pilotado
end

association AvionVolando between
    Avion [1]
    Vuelo [1] 
end

class Pasajero 
    attributes
        nombre : String
        edad : Integer
end

association ViajandoCon between
    Avion[1]
    Pasajero[0..1]
and
------------- Invariants -------------
constraints

context Aerolinea
    -- Nombre de la Aerolinea único
    inv NombreAerolineaDistinto :
          Aerolinea.allInstances()->isUnique(nombre)

context Piloto
    -- Cada PilotoPro debe tener al menos 1000 vuelos como Principal y 2000 como Secundario
    inv esPilotoPro:
        self.viajesComoPrincipal >= 1000 and self.viajesComoSecundario >= 2000

context Aeropuerto
    -- Cada Aeropuerto solo puede tener un Hangar y un Desguace

    -- Nombre de la ciudad del aeropuerto es único
    inv NombreAerolineaDistinto :
          Aeropuerto.allInstances()->isUnique(ciudad)

context Vuelo
    inv IdentificadorVueloDistinto :
          Vuelo.allInstances()->isUnique(identificador)
    