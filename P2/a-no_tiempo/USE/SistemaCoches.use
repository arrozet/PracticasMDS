model sistemaCoches

-------------- Enumerations ------------
enum TipoRevision { reparacion, mantenimiento}
-------------- End of enumerations ------------

-------------- Classes ------------------ 
-- ANOTACION PARA TODOS, SOLUCION A TODOS LOS PROBLEMAS: para saber si un coche esta de viaje o no, buscamos en el ulitmo viaje de 
-- la lista de viajes del coche, si fecha de llegada esta definido 
-- EJEMPLO: context Coche
-- self.viajeCoche->sortedBy(r | r.fechaLlegada)->last().fechaLlegada.isUndefined()

class Clock 
  attributes
    NOW : Integer init = 0 -- POSIX representation starting at 0
    resolution: Integer init = 1 
end

abstract class ActiveObject -- real-time objects 
end

class Coche < ActiveObject
  attributes
    fechaMatriculacion : Integer
    -- esto es derive (apartado 13)
    kmRecorridos : Integer derive : 
      self.viajeCoche->select(v | v.fechaLlegada.isDefined())->collect(v | v.recorridoViaje.numKm)->sum()

    -- esto es derive (apartado 15) - SE USA CLOCK
    enGarantia : Boolean derive : 
      ((self.clock.NOW - self.fechaMatriculacion) <= 4 * 100) or -- No han pasado más de 4 años desde la matriculacion
      -- Hay una revision en un taller oficial y aun le queda garantia
      self.revisionCoche->exists(r | r.tallerRevision.oclIsTypeOf(TallerOficial) and (self.clock.NOW - r.fechaFin <= r.tallerRevision.oclAsType(TallerOficial).tiempoGarantia))

    -- esto es derive (apartado 16) - SE USA CLOCK
    necesitaMantenimiento : Boolean derive : 
        -- Saco la fecha del último mantenimiento
        let fechaUltimoMantenimiento : Integer = (self.revisionCoche->select(r | r.tipoRevision = TipoRevision::mantenimiento)->sortedBy(r | r.fechaFin)->last().fechaFin) in

        ((self.clock.NOW - self.fechaMatriculacion) > 4 * 100) and -- Han pasado más de 4 años desde la matriculacion
        ((self.revisionCoche->isEmpty()) or -- Si no tiene revisiones, le toca revisión
          (self.clock.NOW - fechaUltimoMantenimiento >=  100)) -- Si las tiene, le toca si pasó 1 año desde la última de mantenimiento

end

class Ciudad
  attributes
    nombre : String
    poblacion : Integer
end

-- PREGUNTAR AL PROFESOR SOBRE EL COMENTARIO DE ABAJO
associationclass Recorrido between    -- CiudadOrigen y CiudadFinal, creo que deberemos realizar 2 caminos por cada 2 ciudades
    Ciudad [0..*] role ciudadOrigen -- Esto es para facilitar el modelador
    Ciudad [0..*] role ciudadFinal
  attributes
    numKm : Integer
end

class Viaje
  attributes
    fechaSalida : Integer
    fechaLlegada : Integer
end

class Revision
  attributes
    fechaInicio : Integer
    fechaFin : Integer
    tipoRevision : TipoRevision
end 

class Taller
end 

class TallerOficial < Taller
  attributes
    tiempoGarantia : Integer
end

-------------- End of classes ------------------

-------------- Relationships ------------------
association Time between 
  Clock [1] role clock
  ActiveObject [*] role ao ordered
end

composition UbicacionTaller between
    Ciudad [1] role ciudadTaller
    Taller [0..*] role tallerCiudad
end

association Ubicado between
    Coche [0..*] role cocheEstacionado
    Ciudad [0..1] role ciudadCoche
end

association Revisado between
    Coche [1] role cocheRevision
    Revision [0..*] role revisionCoche
end

association Realizada between
    Taller [1] role tallerRevision
    Revision [0..*] role revisionTaller
end

association Viajado between
    Coche [1] role cocheViaje
    Viaje [0..*] role viajeCoche
end

association ViajeRecorrido between
    Recorrido [1] role recorridoViaje
    Viaje [0..*] role viajeRecorrido
end

-------------- End of relationships ------------------

------------- Invariants -------------

constraints
-------------------------
-- El formato para las invariantes será el siguiente:
-- context [CLASE]
  --- [ANOTACIONES ADICIONALES]
  -- [Número de apartado en enunciado]. [Frase explícita del enunciado]
  --- [ANOTACIONES ADICIONALES]
  --inv [nombre del invariante]
    -- [declaración del invariante]

-- Los invariantes implícitos se indicarán en [Número de apartado en enunciado] con una ? 
-- Si tienes dudas, hay un ejemplo justo abajo
-------------------------


context Clock
  ---
  -- ?. Debe haber, como mucho, un solo reloj en el sistema. 
  ---
  inv RelojEsUnico :     
    Clock.allInstances()->size()=1


context Recorrido
  ---
  -- 1. Cada ciudad debe estar al menos a 5 kilómetros de distancia de otra. 
  ---
  inv DistanciaEntreCiudadesAlMenosCinco :
    self.numKm >= 5

context Revision
  ---
  -- 4. Todas las revisiones deben tener lugar después de que el coche se matriculase
  ---
  inv RevisionDespuesDeMatriculacion :
    self.cocheRevision.fechaMatriculacion < self.fechaInicio

  ---
  -- ?. Las fechas de una revisión deben ser válidas.
  -- Para ser válidas, la fecha de inicio de una revisión es anterior a la fecha de finalización y todas las fechas deben ser positivas
  -- Además, la fecha de inicio siempre debe estar definida
  -- También deben ser posteriores a la fecha de matriculación del vehículo que realiza el viaje.
  ---
  inv FechasRevisionValidas : 
    self.fechaInicio.isDefined() and self.fechaInicio >= 0 and 
    (self.fechaFin.isDefined() implies (self.fechaInicio <= self.fechaFin and self.fechaFin>=0)) and
    self.cocheRevision.fechaMatriculacion <= self.fechaInicio

context Ciudad
  ---
  -- 6. En cada ciudad habrá, a lo sumo, un taller oficial, pudiendo 
  -- haber varios talleres no oficiales. 
  --- se comprobará mirando si el taller es oficial, que solo exista uno
  inv UnSoloTallerOficial :
    self.tallerCiudad->select(t | t.oclIsTypeOf(TallerOficial))->size() <= 1 

context Viaje
  ---
  -- 8. Si el coche está realizando actualmente algún viaje, dicho
  -- viaje únicamente tendrá fecha de salida, pero no de llegada.
  ---
  inv ViajeEnCurso :
    self.cocheViaje.ciudadCoche.isUndefined() implies self.fechaLlegada.isUndefined()

  ---
  -- ?. Las fechas de un viaje deben ser válidas.
  -- Para ser válidas, la fecha de salida de un viaje es anterior a la fecha de llegada y todas las fechas deben ser positivas.
  -- Además, la fecha de salida siempre debe estar definida.
  -- También deben ser posteriores a la fecha de matriculación del vehículo que realiza el viaje.
  ---
  inv FechasViajeValidas :
    self.fechaSalida.isDefined() and self.fechaSalida >= 0 and 
    (self.fechaLlegada.isDefined() implies (self.fechaSalida <= self.fechaLlegada and self.fechaLlegada >= 0)) and
    self.cocheViaje.fechaMatriculacion <= self.fechaSalida

context Coche
  ---
  -- ?. La fecha de matriculación debe ser válida, es decir, debe ser positiva.
  ---
  inv FechaMatriculacionValida :
    self.fechaMatriculacion >= 0

  ---
  -- 5. Como mucho, un coche se debe someter a una revisión, como máximo, en un momento dado. 
  ---
  inv UnaRevisionALaVez :
    self.revisionCoche->select(r | r.fechaFin.isUndefined())->size() <= 1

  ---
  -- 7. Si un coche está siendo sometido a una revisión, entonces el coche debe encontrarse en 
  -- la misma ciudad donde está el taller.
  ---
  inv CiudadCocheEnRevision_Igual_CiudadTaller :
    self.revisionCoche->isEmpty() or  -- no tiene revisiones
    self.revisionCoche->exists(r | r.fechaFin.isUndefined() implies self.ciudadCoche = r.tallerRevision.ciudadTaller) -- o si tiene, la revisión que está teniendo es en la misma ciudad
    -- si el exists no encuentra nada, da correcto (según ChatGPT)
  
  --- 
  -- 9. Un coche se encontrará en todo momento bien realizando un viaje determinado o bien en
  -- una ciudad.
  ---
  inv CocheEnViajeOCiudad :
    (self.viajeCoche->isEmpty() and self.ciudadCoche.isDefined()) or  -- si nunca ha hecho un viaje, está en una ciudad
    (self.viajeCoche->exists(v | v.fechaLlegada.isUndefined()) and self.ciudadCoche.isUndefined()) or -- si está haciendo un viaje, no está en una ciudad
    (self.ciudadCoche.isDefined() and not self.viajeCoche->exists(v | v.fechaLlegada.isUndefined())) -- si está en una ciudad, no está haciendo un viaje

  ---
  -- 10. Si el coche ha completado al menos un viaje y no se encuentra viajando, entonces debe
  -- encontrarse en la ciudad a la que llegó en su último viaje.
  ---
  inv CocheTerminaEnCiudad :
    (self.viajeCoche->isEmpty()) or   -- Tiene que dar correcto si ha completado 0 viajes
    (not self.viajeCoche->exists(v | v.fechaLlegada.isUndefined()) implies -- si el coche no está en un viaje
    (self.ciudadCoche = self.viajeCoche->sortedBy(v | v.fechaLlegada)->last().recorridoViaje.ciudadFinal)) -- la ciudad en la que está ahora es la ciudad a la que ha llegado en el último viaje

  ---
  -- 11. Dos viajes no pueden solaparse en el tiempo, es decir, un viaje debe ocurrir siempre 
  -- después de otro, pudiendo la fecha de llegada de un viaje coincidir con la fecha de salida 
  -- del siguiente. 
  ---
  inv ViajesNoSeSolapan :
    let viajesOrdenados : OrderedSet(Viaje) = self.viajeCoche->sortedBy(v | v.fechaSalida) in -- Saco los viajes ordenados
      (self.viajeCoche -> size() >= 2) implies -- Si tengo más de 2
      (self.viajeCoche-> forAll(v1,v2 | viajesOrdenados->indexOf(v1) = 
                                viajesOrdenados->indexOf(v2) - 1 implies ((v1.fechaLlegada <= v2.fechaSalida)))) -- basicamente, viaje[i].fechaLlegada < viaje[j].fechaSalida | i < j
  ---
  -- 12. Las ciudades de origen y destino de los viajes deben ser coherentes. Es decir, si un coche 
  -- realiza un viaje desde la ciudad A hasta la ciudad B, el próximo viaje debe partir desde la ciudad B.
  --- 
  inv CiudadesCoherentes : 
    let viajesOrdenados : OrderedSet(Viaje) = self.viajeCoche->sortedBy(v | v.fechaSalida) in -- Saco los viajes ordenados
      (self.viajeCoche -> size() >= 2) implies -- Si tengo más de 2
      (self.viajeCoche-> forAll(v1,v2 | viajesOrdenados->indexOf(v1) = 
                                viajesOrdenados->indexOf(v2) - 1 implies (v1.recorridoViaje.ciudadFinal = v2.recorridoViaje.ciudadOrigen))) -- si llegas a una ciudad, en el siguiente viaje partes desde ella
  ---
  -- 14. ESTO NO ES UN INVARIANTE, ES UNA ASUNCIÓN QUE SE HACE PARA FACILITAR EL MODELADO
  ---
  ---
  -- 15. ESTO NO ES UN INVARIANTE, ES EL DERIVE DE enGarantia
  ---
  ---
  -- 16. ESTO NO ES UN INVARIANTE, ES EL DERIVE DE necesitaMantenimiento
  ---
-------------- End of invariants ------------------
-------------- End of invariants ------------------

