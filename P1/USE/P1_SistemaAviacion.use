model SistemaAviacion
-------------- Enumerations ------------
-------------- Classes ------------------
class Aerolinea
    attributes
        nombre : String
end

class Avion
    attributes
        viajesCompletados : Integer derive : self.vuelosAvion->size()               -- contar los vuelos realizados
        kmRecorridos : Real derive : self.vuelosAvion->collect(t|t.numKm)->sum()    -- suma de los km de los vuelos realizados
end

associationclass Contrato between 
        Avion [1..*] role contratado
        Aerolinea [1..*] role contratante
    attributes
        numMesesContrato : Integer
        precioMes : Real
        precioTotal : Real derive : self.precioMes * self.numMesesContrato
end

class Aeropuerto
    attributes
        ciudad : String
end

class Almacen --  Los hangares y los desguaces tienen una capacidad máxima
    attributes
        capacidadMax : Integer
end 

-- Desguace hereda de almacén
class Desguace < Almacen
end 

-- Hangar hereda de almacén
class Hangar < Almacen
end 

class Persona
    attributes
        nombre : String
        edad : Integer
end

class Piloto < Persona
    attributes
        kmVolados : Real derive : -- Los kmVolados de un piloto son la suma de los km volados como principal y como secundario
            self.vueloPrincipal->collect(v | v.numKm)->sum() + 
            self.vueloSecundario->collect(v | v.numKm)->sum()
        esPro : Boolean derive : -- Cada PilotoPro debe tener al menos 1000 vuelos como Principal y 2000 como Secundario
            self.vueloPrincipal->size() >= 1000 and self.vueloSecundario->size() >= 2000
end



class Vuelo 
    attributes
        id : Integer
        numKm : Real
end

-------------- Relationships ------------------
association Realiza between
    Avion [1] role vehiculo
    Vuelo [0..*] role vuelosAvion
end

-- AvionAerolinea la modela la associationClass de Contrato

association Estacionado between
    Avion [0..*] role almacenamientoHangar
    Hangar [0..1] role estanciaHangar
    
end

association Inutilizado between
    Avion [0..*] role almacenamientoDesguace
    Desguace [0..1] role estanciaDesguace
end

composition HangarAeropuerto between
    Aeropuerto [1]
    Hangar [0..*]
end

composition DesguaceAeropuerto between
    Aeropuerto [1]
    Desguace [0..1]
end

association PilotoPrincipalVuela between 
    Vuelo [0..*] role vueloPrincipal -- un piloto, a lo largo de su vida, pilota varios vuelos
    Piloto [1] role pilotoPrincipal -- pero un vuelo es solo pilotado por un piloto
end

association PilotoSecundarioVuela between 
    Vuelo [0..*] role vueloSecundario  -- un piloto, a lo largo de su vida, pilota varios vuelos
    Piloto [0..1] role pilotoSecundario -- pero un vuelo es solo pilotado por un piloto
end

association Transporta between
    Vuelo [0..1] role vuelosPasajeros
    Persona [0..*] role pasajeros
end

------------- Invariants -------------
constraints

context Aerolinea
    ---
    -- Cada Aerolínea tiene un nombre que debe ser distinto al de las demás => 
    -- Nombre de la Aerolínea es único
    ---
    inv NombreAerolineaDistinto :
        Aerolinea.allInstances()->isUnique(nombre)

context Avion
    ---
    -- Todo Avión debe encontrarse volando, estacionado en un Hangar o ha sido ya relegado a un Desguace.
    -- Es decir, no puede a la vez estar en un desguace y en un hangar, o volando y en un hangar, o volando y en un desguace...
    ---
    inv AvionUnicoEstado:   -- o esta en desguace, o esta en hangar, o no esta en ninguno (esta volando)
        (self.estanciaHangar.oclIsUndefined() or self.estanciaDesguace.oclIsUndefined())

    ---
    -- Los Aviones que deben encontrarse en un Desguace son aquellos que han completado los 1000 viajes.
    ---
    inv AvionCorrectamenteDesguace_1000 : 
        (self.viajesCompletados < 1000 and self.estanciaDesguace.oclIsUndefined()) or (self.viajesCompletados >= 1000 and (not self.estanciaDesguace.oclIsUndefined())) -- debe ser oclIsUndefined porque debe comprobar si es nulo, no vacío
        
    --Este invariante está creado para comprobar el de arriba sin meter 1000 aviones. Se comprueba en pruebaInvarianteVuelo.soil
    --inv AvionCorrectamenteDesguace_2 : 
    --    self.viajesCompletados < 2 and self.estanciaDesguace.oclIsUndefined() 
    --    or (self.viajesCompletados >= 2 and (not self.estanciaDesguace.oclIsUndefined()))--Usado para probar que funciona el invariante de los 1000 vuelos

context Piloto
    ---
    -- No se permite a un piloto trabajar o haber trabajado para más de dos aerolíneas diferentes. 
    ---
    inv maxDosAerolineasPorPiloto:       -- las aerolineas para las que ha trabajado como principal o como secundario
        let aerolineasPilotadas: Set(Aerolinea) =   self.vueloPrincipal->collect(v | v.vehiculo.contratante)->asSet()->
                                                    union(self.vueloSecundario->collect(v | v.vehiculo.contratante)->asSet()) in
        aerolineasPilotadas->size() <= 2    -- deben ser menos de 2
    
context Aeropuerto
    ---
    -- Los aeropuertos se ubican en ciudades, no pudiendo haber más de un aeropuerto en cada ciudad => 
    -- Nombre de la ciudad del aeropuerto es único
    ---
    inv CiudadAeropuertoDistinta :
        Aeropuerto.allInstances()->isUnique(ciudad)

context Vuelo
    ---
    -- Los pilotos principal y secundario deben ser personas distintas.
    ---
    inv PilotosDiferentes:
        self.pilotoSecundario.oclIsUndefined() or self.pilotoPrincipal <> self.pilotoSecundario -- o no hay o son distintos
    
    ---
    -- En cuanto a los vuelos que realizan los aviones, de cada vuelo que realiza cada avión se registra su identificador, que ha de ser único para cada vuelo,
    ---
    inv IdVueloDiferentes:
        Vuelo.allInstances()->isUnique(id) 

    
context Hangar
    ---
    -- En el hangar no puede haber más aviones que la capacidad maxima
    ---
    inv CapacidadMaxHangar :
        self.almacenamientoHangar -> size() <= self.capacidadMax -- tiene que haber menos aviones relacionados con hangar que su capacidadMax

context Desguace
    ---
    -- En el desgauce no puede haber más aviones que la capacidad maxima
    ---
    inv CapacidadMaxDesguace :
        self.almacenamientoDesguace -> size() <= self.capacidadMax -- tiene que haber menos aviones relacionados con desguace que su capacidadMax
